---
- name: get deployment name
  set_fact:
    deployment: "{{ microservices_info[item.key]['deployment'] | default(item.key) }}"

- name: get namespace
  set_fact:
    namespace: "{{ microservices_info[item.key]['namespace'] }}-{{ env }}"
  when: namespace is not defined

- name: get current deployment
  shell: "KUBECONFIG=$KUBECONFIG:{{ kubeconfig }} kubectl get deployments -n {{ namespace }} --context {{ context }} | grep -w \"^{{ deployment }}\" | awk '{print $1}'"
  register: current_deployment_status_output
  changed_when: false

- name: get current name of deployment
  set_fact:
    old_deployment_name: "{{ current_deployment_status_output.stdout | regex_replace('^(.*)-v(.*)$', '\\1') }}"

- block:
  - debug:
      msg: "deployment name ({{ old_deployment_name }}) is not consistent with pattern name-version (latest/vXX.XX.XX), or more than one deployment of {{ deployment }} exists, trying to revert all changes!"

  - name: delete already created deployments
    include_tasks: bg_revertdeploys.yml
    loop: "{{ deployed_versions | default({}) | dict2items }}"
    loop_control:
      loop_var: deploy
    when: deployed_versions is defined

  - fail:
      msg: "Error while deploying version {{ item.value.new_version }} of {{ deployment }}, all previously deployed services were deleted"
  when: old_deployment_name != deployment

- name: check if new_version is different from current one
  debug:
    msg: "Desired version is already running"
  when: item.value.new_version == item.value.old_version

- name: create sed command instruction (vX\2Y\4Z-ABC)
  shell: 'echo {{ item.value.new_version }} | sed -r "s/{{ semver_regex }}/v\1\\\2\3\\\4\5\6/"'
  register: res

- name: set sed version flag to use on replace
  set_fact:
    sed_replace_version: "{{ res.stdout }}"

- block:
  - name: create new deployment
    shell: 'KUBECONFIG=$KUBECONFIG:{{ kubeconfig }} kubectl get deployment {{ current_deployment_status_output.stdout }} -n {{ namespace }} --context {{ context }} -o yaml | sed -r "s,{{ semver_regex }},{{ sed_replace_version }}," | KUBECONFIG=$KUBECONFIG:{{ kubeconfig }} kubectl apply --context {{ context }} -f -'
    register: new_deployment_status_output
    failed_when: "'created' not in new_deployment_status_output.stdout"

  - name: set deploy versions dict
    set_fact:
      deployed_versions: "{{ deployed_versions | default({}) | combine({ deployment: { 'new_version': item.value.new_version, 'old_version': item.value.old_version, 'namespace': namespace }}) }}"

  when: item.value.new_version != item.value.old_version
